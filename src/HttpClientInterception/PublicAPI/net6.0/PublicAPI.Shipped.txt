#nullable enable
JustEat.HttpClientInterception.BundleExtensions
JustEat.HttpClientInterception.HttpClientInterceptorOptions
JustEat.HttpClientInterception.HttpClientInterceptorOptions.BeginScope() -> System.IDisposable!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.Clear() -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.Clone() -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.Deregister(JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.Deregister(System.Net.Http.HttpMethod! method, System.Uri! uri) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.HttpClientInterceptorOptions() -> void
JustEat.HttpClientInterception.HttpClientInterceptorOptions.HttpClientInterceptorOptions(bool caseSensitive) -> void
JustEat.HttpClientInterception.HttpClientInterceptorOptions.OnMissingRegistration.get -> System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!>?
JustEat.HttpClientInterception.HttpClientInterceptorOptions.OnMissingRegistration.set -> void
JustEat.HttpClientInterception.HttpClientInterceptorOptions.OnSend.get -> System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task!>?
JustEat.HttpClientInterception.HttpClientInterceptorOptions.OnSend.set -> void
JustEat.HttpClientInterception.HttpClientInterceptorOptions.Register(JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.RegisterByteArray(System.Net.Http.HttpMethod! method, System.Uri! uri, System.Func<System.Threading.Tasks.Task<byte[]!>!>! contentFactory, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string! mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.IEnumerable<string!>!>>? responseHeaders = null, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.IEnumerable<string!>!>>? contentHeaders = null, System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task!>? onIntercepted = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.RegisterStream(System.Net.Http.HttpMethod! method, System.Uri! uri, System.Func<System.Threading.Tasks.Task<System.IO.Stream!>!>! contentStream, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string! mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.IEnumerable<string!>!>>? responseHeaders = null, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.IEnumerable<string!>!>>? contentHeaders = null, System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task!>? onIntercepted = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
JustEat.HttpClientInterception.HttpClientInterceptorOptions.ThrowOnMissingRegistration.get -> bool
JustEat.HttpClientInterception.HttpClientInterceptorOptions.ThrowOnMissingRegistration.set -> void
JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.For(System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task<bool>!>! predicate) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.For(System.Predicate<System.Net.Http.HttpRequestMessage!>? predicate) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForAll(System.Collections.Generic.ICollection<System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task<bool>!>!>! predicates) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForAll(System.Collections.Generic.ICollection<System.Predicate<System.Net.Http.HttpRequestMessage!>!>! predicates) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForAnyHost() -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForContent(System.Func<System.Net.Http.HttpContent!, System.Threading.Tasks.Task<bool>!>? predicate) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForHost(string! host) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForMethod(System.Net.Http.HttpMethod! method) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForPath(string! path) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForPort(int port) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForQuery(string! query) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeader(string! name, System.Collections.Generic.IEnumerable<string!>! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeader(string! name, params string![]! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeader(string! name, string! value) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeaders(System.Collections.Generic.IDictionary<string!, System.Collections.Generic.ICollection<string!>!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeaders(System.Collections.Generic.IDictionary<string!, string!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForRequestHeaders(System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.ICollection<string!>!>>!>! headerFactory) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForScheme(string! scheme) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForUri(System.Uri! uri) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.ForUri(System.UriBuilder! uriBuilder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.HavingPriority(int? priority) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.HttpRequestInterceptionBuilder() -> void
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.IgnoringPath(bool ignorePath = true) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.IgnoringQuery(bool ignoreQuery = true) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContent(System.Func<System.Threading.Tasks.Task<byte[]!>!>! contentFactory) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContent(System.Func<byte[]!>? contentFactory) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeader(string! name, System.Collections.Generic.IEnumerable<string!>! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeader(string! name, params string![]! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeader(string! name, string! value) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeaders(System.Collections.Generic.IDictionary<string!, System.Collections.Generic.ICollection<string!>!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeaders(System.Collections.Generic.IDictionary<string!, string!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentHeaders(System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.ICollection<string!>!>>!>! headerFactory) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentStream(System.Func<System.IO.Stream!>? contentStream) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithContentStream(System.Func<System.Threading.Tasks.Task<System.IO.Stream!>!>! contentStream) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Action<System.Net.Http.HttpRequestMessage!>! onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task<bool>!>! onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.Tasks.Task!>! onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>!>! onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Func<System.Net.Http.HttpRequestMessage!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithInterceptionCallback(System.Predicate<System.Net.Http.HttpRequestMessage!>? onIntercepted) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithMediaType(string! mediaType) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithReason(string! reasonPhrase) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeader(string! name, System.Collections.Generic.IEnumerable<string!>! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeader(string! name, params string![]! values) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeader(string! name, string! value) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeaders(System.Collections.Generic.IDictionary<string!, System.Collections.Generic.ICollection<string!>!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeaders(System.Collections.Generic.IDictionary<string!, string!>! headers) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithResponseHeaders(System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.ICollection<string!>!>>!>! headerFactory) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithStatus(System.Net.HttpStatusCode statusCode) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithStatus(int statusCode) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilder.WithVersion(System.Version! version) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions
JustEat.HttpClientInterception.HttpRequestNotInterceptedException
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException() -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string! message) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string! message, System.Exception! innerException) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.HttpRequestNotInterceptedException(string! message, System.Net.Http.HttpRequestMessage! request) -> void
JustEat.HttpClientInterception.HttpRequestNotInterceptedException.Request.get -> System.Net.Http.HttpRequestMessage?
JustEat.HttpClientInterception.InterceptingHttpMessageHandler
JustEat.HttpClientInterception.InterceptingHttpMessageHandler.InterceptingHttpMessageHandler(JustEat.HttpClientInterception.HttpClientInterceptorOptions! options) -> void
JustEat.HttpClientInterception.InterceptingHttpMessageHandler.InterceptingHttpMessageHandler(JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, System.Net.Http.HttpMessageHandler! innerHandler) -> void
JustEat.HttpClientInterception.SystemTextJsonExtensions
override JustEat.HttpClientInterception.InterceptingHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!
static JustEat.HttpClientInterception.BundleExtensions.RegisterBundle(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! path) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.BundleExtensions.RegisterBundle(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! path, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>! templateValues) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.BundleExtensions.RegisterBundleAsync(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! path, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>? templateValues = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<JustEat.HttpClientInterception.HttpClientInterceptorOptions!>!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.CreateHttpClient(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! baseAddress) -> System.Net.Http.HttpClient!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.CreateHttpClient(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, System.Uri! baseAddress, System.Net.Http.HttpMessageHandler? innerHandler = null) -> System.Net.Http.HttpClient!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.DeregisterGet(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! uriString) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.Register(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, System.Collections.Generic.IEnumerable<JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!>! collection) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.Register(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, params JustEat.HttpClientInterception.HttpRequestInterceptionBuilder![]! collection) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterByteArray(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, System.Net.Http.HttpMethod! method, System.Uri! uri, System.Func<byte[]!>! contentFactory, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string! mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>? responseHeaders = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterGet(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! uriString, string! content, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string! mediaType = "application/json") -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterGetJson(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, string! uriString, object! content, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.RegisterStream(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options, System.Net.Http.HttpMethod! method, System.Uri! uri, System.Func<System.IO.Stream!>! contentStream, System.Net.HttpStatusCode statusCode = System.Net.HttpStatusCode.OK, string! mediaType = "application/json", System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>? responseHeaders = null) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpClientInterceptorOptionsExtensions.ThrowsOnMissingRegistration(this JustEat.HttpClientInterception.HttpClientInterceptorOptions! options) -> JustEat.HttpClientInterception.HttpClientInterceptorOptions!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, System.Predicate<System.Net.Http.HttpContent!>? predicate) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForDelete(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForFormContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>! parameters) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForGet(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForHttp(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForHttps(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForPost(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForPut(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.ForUrl(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, string! uriString) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.RegisterWith(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, JustEat.HttpClientInterception.HttpClientInterceptorOptions! options) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.Requests(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.Responds(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.WithContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, string! content) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.WithFormContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>! parameters) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.HttpRequestInterceptionBuilderExtensions.WithJsonContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, object! content) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
static JustEat.HttpClientInterception.SystemTextJsonExtensions.WithSystemTextJsonContent(this JustEat.HttpClientInterception.HttpRequestInterceptionBuilder! builder, object! content, System.Text.Json.JsonSerializerOptions? options = null) -> JustEat.HttpClientInterception.HttpRequestInterceptionBuilder!
virtual JustEat.HttpClientInterception.HttpClientInterceptorOptions.CreateHttpClient(System.Net.Http.HttpMessageHandler? innerHandler = null) -> System.Net.Http.HttpClient!
virtual JustEat.HttpClientInterception.HttpClientInterceptorOptions.CreateHttpMessageHandler() -> System.Net.Http.DelegatingHandler!
virtual JustEat.HttpClientInterception.HttpClientInterceptorOptions.GetResponseAsync(System.Net.Http.HttpRequestMessage! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage?>!
